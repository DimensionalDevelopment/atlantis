plugins {
    id 'dev.architectury.loom' version '0.12.0-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower' version '1.6.0'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

// JENKINS STUFF! LEAVE THIS ALONE!
if (System.getenv('BUILD_NUMBER') != null) {
    version = "${version}." + System.getenv('BUILD_NUMBER')
}


repositories {
    maven { url 'https://jitpack.io' }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        name = 'TerraformersMC'
        url = 'https://maven.terraformersmc.com/'
    }
    maven { url "https://maven.shedaniel.me/" }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        name = "cursemaven"
        url = "https://www.cursemaven.com"
    }
    flatDir {
        dir 'libs'
    }
    maven {
        url = "https://maven.parchmentmc.org"
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.18.2:2022.05.02@zip")
    }
    forge "net.minecraftforge:forge:${project.forge_version}"

//    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
//    modImplementation 'software.bernie.geckolib:geckolib-fabric-1.18:3.0.32'
//    modImplementation 'net.kyrptonaught:customportalapi:0.0.1-beta49-1.18'

    modImplementation 'com.github.Mysticpasta1:customportalapi:ab40780bf3'

    modImplementation 'software.bernie.geckolib:geckolib-1.18-forge:3.0.12' //3.0.12 is 1.18.2

    modImplementation "curse.maven:cloth_config_forge-348521:3782776"

    modImplementation "curse.maven:cyanide-541676:3811793"

//    compileOnly "curse.maven:cloth_config_forge-348521:3546623"

//    include 'net.kyrptonaught:customportalapi:0.0.1-beta49-1.18'
    // Fabric API. This is technically optional, but you probably want it anyway.
//    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
//    modApi("me.shedaniel.cloth:cloth-config-fabric:6.1.50") {
//        exclude(group: "net.fabricmc.fabric-api")
//    }
//    modImplementation ("com.terraformersmc:modmenu:3.0.1") {
//        exclude module: "fabric-api"
//    }
    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
//    modImplementation("com.github.Mysticpasta1:OpenWorlds:cce9fed") {
//        exclude module: "fabric-api"
//    }
//    include 'com.github.Mysticpasta1:OpenWorlds:cce9fed'
//    modImplementation(group: 'com.google.code.gson', name: 'gson', version: '2.8.7')
}

loom {
    forge {
        mixinConfigs = [
            "atlantis.mixins.json"
        ]

        dataGen {
            mod "atlantis"
        }
    }

    launches {
        data {
            arg "--existing", file("src/main/resources").absolutePath
        }
    }
}


processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar { // shit
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

loom {
    accessWidenerPath =  file("src/main/resources/atlantis.accesswidener")
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // Select the repositories you want to publish to
    // To publish to maven local, no extra repositories are necessary. Just use the task `publishToMavenLocal`.
    repositories {
        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    }
}
