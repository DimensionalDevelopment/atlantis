plugins {
    id 'net.neoforged.gradle' version '[6.0.13, 6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'eclipse'
    id 'maven-publish'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

// JENKINS STUFF! LEAVE THIS ALONE!
if (System.getenv('BUILD_NUMBER') != null) {
    version = "${version}." + System.getenv('BUILD_NUMBER')
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: project.mappings, version: project.mappings_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'examplemod'
            
            arg "-mixin.config=atlantis.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                atlantis {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'examplemod'
            
            arg "-mixin.config=atlantis.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                atlantis {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'examplemod'
            
            arg "-mixin.config=atlantis.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            
            mods {
                atlantis {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', 'atlantis', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                atlantis {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "CurseForge Maven" //Base
		url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
	}
    maven { 
	    name = "Shedaniel Maven" //REI + Cloth Config
	    url "https://maven.shedaniel.me/" 
	}
	maven { 
	 	name = "Jitpack IO" //Jitpack
		url 'https://jitpack.io' 
	}
    maven {
        name = "TerraformersMC" //Terraformers
        url = 'https://maven.terraformersmc.com/'
    }
    maven {
        name = "ModMaven" //ModMaven
        url = "https://modmaven.dev"
    }
    flatDir {
        dir 'libs'
    }
}

dependencies {
    // Base
    minecraft "net.neoforged:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Libraries
    implementation fg.deobf("com.github.Mysticpasta1:customportalapi:${customportalapi_version}")
    implementation fg.deobf("curse.maven:geckolib-388172:${geckolib_version}")
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}")
    implementation fg.deobf("curse.maven:architectury-api-419699:${architectury_version}")

    // Extras
    implementation fg.deobf("curse.maven:cyanide_forge-541676:${cyanide_version}")
    implementation fg.deobf("curse.maven:spark-361579:4057111")
    implementation fg.deobf("curse.maven:artifacts-forge-312353:${artifacts_version}")
    implementation fg.deobf("curse.maven:expandability-forge-465066:${expandability_version}")

    implementation fg.deobf("curse.maven:appleskin-248787:${appleskin_version}")
    implementation fg.deobf("curse.maven:catalogue-459701:${catalogue_version}")

    implementation fg.deobf("org.reflections:reflections:${reflections_version}")

    implementation fg.deobf("curse.maven:curios-309927:${curios_version}")
}

mixin {
    add sourceSets.main, "atlantis.refmap.json"
    config "atlantis.mixins.json"
    
    debug.verbose = true
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "atlantis",
                "Specification-Vendor"    : "Mysticpasta1",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Mysticpasta1",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
